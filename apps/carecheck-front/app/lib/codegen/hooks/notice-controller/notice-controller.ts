/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * carecheck
 * api Î¨∏ÏÑú
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateNotice200,
  DeleteNotice200,
  ModifyNotice200,
  ReqModifyNoticeDto,
  ReqWriteNoticeDto,
  SearchNoticeByUsercode200,
  SearchNoticeByUsercodeParams,
  SearchNoticeList200,
  SearchNoticeListParams,
  UpdateViewCount200
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType , BodyType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 */
export const modifyNotice = (
    noticeId: number,
    reqModifyNoticeDto: BodyType<ReqModifyNoticeDto>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ModifyNotice200>(
      {url: `/api/notices/mylist/${noticeId}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: reqModifyNoticeDto
    },
      options);
    }
  


export const getModifyNoticeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof modifyNotice>>, TError,{noticeId: number;data: BodyType<ReqModifyNoticeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof modifyNotice>>, TError,{noticeId: number;data: BodyType<ReqModifyNoticeDto>}, TContext> => {
    
const mutationKey = ['modifyNotice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof modifyNotice>>, {noticeId: number;data: BodyType<ReqModifyNoticeDto>}> = (props) => {
          const {noticeId,data} = props ?? {};

          return  modifyNotice(noticeId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ModifyNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof modifyNotice>>>
    export type ModifyNoticeMutationBody = BodyType<ReqModifyNoticeDto>
    export type ModifyNoticeMutationError = ErrorType<unknown>

    /**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏàòÏ†ï
 */
export const useModifyNotice = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof modifyNotice>>, TError,{noticeId: number;data: BodyType<ReqModifyNoticeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof modifyNotice>>,
        TError,
        {noticeId: number;data: BodyType<ReqModifyNoticeDto>},
        TContext
      > => {

      const mutationOptions = getModifyNoticeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Ï°∞Ìöå
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Ï°∞Ìöå
 */
export const searchNoticeList = (
    params: SearchNoticeListParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SearchNoticeList200>(
      {url: `/api/notices`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchNoticeListQueryKey = (params: SearchNoticeListParams,) => {
    return [`/api/notices`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchNoticeListInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeList>>>, TError = ErrorType<unknown>>(params: SearchNoticeListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchNoticeListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchNoticeList>>> = ({ signal }) => searchNoticeList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchNoticeListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchNoticeList>>>
export type SearchNoticeListInfiniteQueryError = ErrorType<unknown>


export function useSearchNoticeListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeList>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeList>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeList>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeList>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeList>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useSearchNoticeListInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeList>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchNoticeListInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchNoticeListQueryOptions = <TData = Awaited<ReturnType<typeof searchNoticeList>>, TError = ErrorType<unknown>>(params: SearchNoticeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchNoticeListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchNoticeList>>> = ({ signal }) => searchNoticeList(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchNoticeListQueryResult = NonNullable<Awaited<ReturnType<typeof searchNoticeList>>>
export type SearchNoticeListQueryError = ErrorType<unknown>


export function useSearchNoticeList<TData = Awaited<ReturnType<typeof searchNoticeList>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeList>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeList<TData = Awaited<ReturnType<typeof searchNoticeList>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeList>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeList>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeList<TData = Awaited<ReturnType<typeof searchNoticeList>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ Ï†ÑÏ≤¥ Ï°∞Ìöå
 */

export function useSearchNoticeList<TData = Awaited<ReturnType<typeof searchNoticeList>>, TError = ErrorType<unknown>>(
 params: SearchNoticeListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeList>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchNoticeListQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏûëÏÑ±
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏûëÏÑ±
 */
export const createNotice = (
    reqWriteNoticeDto: BodyType<ReqWriteNoticeDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CreateNotice200>(
      {url: `/api/notices`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reqWriteNoticeDto, signal
    },
      options);
    }
  


export const getCreateNoticeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNotice>>, TError,{data: BodyType<ReqWriteNoticeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createNotice>>, TError,{data: BodyType<ReqWriteNoticeDto>}, TContext> => {
    
const mutationKey = ['createNotice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createNotice>>, {data: BodyType<ReqWriteNoticeDto>}> = (props) => {
          const {data} = props ?? {};

          return  createNotice(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof createNotice>>>
    export type CreateNoticeMutationBody = BodyType<ReqWriteNoticeDto>
    export type CreateNoticeMutationError = ErrorType<unknown>

    /**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏûëÏÑ±
 */
export const useCreateNotice = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createNotice>>, TError,{data: BodyType<ReqWriteNoticeDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createNotice>>,
        TError,
        {data: BodyType<ReqWriteNoticeDto>},
        TContext
      > => {

      const mutationOptions = getCreateNoticeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Ï°∞ÌöåÏàò Ï∂îÍ∞Ä
 * @summary Ï°∞ÌöåÏàò Ï¶ùÍ∞Ä
 */
export const updateViewCount = (
    noticeId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UpdateViewCount200>(
      {url: `/api/notices/${noticeId}`, method: 'POST', signal
    },
      options);
    }
  


export const getUpdateViewCountMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateViewCount>>, TError,{noticeId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateViewCount>>, TError,{noticeId: number}, TContext> => {
    
const mutationKey = ['updateViewCount'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateViewCount>>, {noticeId: number}> = (props) => {
          const {noticeId} = props ?? {};

          return  updateViewCount(noticeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateViewCountMutationResult = NonNullable<Awaited<ReturnType<typeof updateViewCount>>>
    
    export type UpdateViewCountMutationError = ErrorType<unknown>

    /**
 * @summary Ï°∞ÌöåÏàò Ï¶ùÍ∞Ä
 */
export const useUpdateViewCount = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateViewCount>>, TError,{noticeId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateViewCount>>,
        TError,
        {noticeId: number},
        TContext
      > => {

      const mutationOptions = getUpdateViewCountMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 */
export const deleteNotice = (
    noticeId: number,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<DeleteNotice200>(
      {url: `/api/notices/${noticeId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteNoticeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotice>>, TError,{noticeId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteNotice>>, TError,{noticeId: number}, TContext> => {
    
const mutationKey = ['deleteNotice'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteNotice>>, {noticeId: number}> = (props) => {
          const {noticeId} = props ?? {};

          return  deleteNotice(noticeId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteNoticeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteNotice>>>
    
    export type DeleteNoticeMutationError = ErrorType<unknown>

    /**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ ÏÇ≠Ï†ú
 */
export const useDeleteNotice = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteNotice>>, TError,{noticeId: number}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteNotice>>,
        TError,
        {noticeId: number},
        TContext
      > => {

      const mutationOptions = getDeleteNoticeMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * Í≥µÏßÄÏÇ¨Ìï≠ usercodeÎ°ú Ï°∞Ìöå
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ usecode Ï°∞Ìöå
 */
export const searchNoticeByUsercode = (
    params: SearchNoticeByUsercodeParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SearchNoticeByUsercode200>(
      {url: `/api/notices/mylist`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSearchNoticeByUsercodeQueryKey = (params: SearchNoticeByUsercodeParams,) => {
    return [`/api/notices/mylist`, ...(params ? [params]: [])] as const;
    }

    
export const getSearchNoticeByUsercodeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeByUsercode>>>, TError = ErrorType<unknown>>(params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchNoticeByUsercodeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchNoticeByUsercode>>> = ({ signal }) => searchNoticeByUsercode(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchNoticeByUsercodeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof searchNoticeByUsercode>>>
export type SearchNoticeByUsercodeInfiniteQueryError = ErrorType<unknown>


export function useSearchNoticeByUsercodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeByUsercode>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeByUsercode>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeByUsercode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeByUsercodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeByUsercode>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeByUsercode>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeByUsercode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeByUsercodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeByUsercode>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ usecode Ï°∞Ìöå
 */

export function useSearchNoticeByUsercodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof searchNoticeByUsercode>>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchNoticeByUsercodeInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSearchNoticeByUsercodeQueryOptions = <TData = Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError = ErrorType<unknown>>(params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSearchNoticeByUsercodeQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof searchNoticeByUsercode>>> = ({ signal }) => searchNoticeByUsercode(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SearchNoticeByUsercodeQueryResult = NonNullable<Awaited<ReturnType<typeof searchNoticeByUsercode>>>
export type SearchNoticeByUsercodeQueryError = ErrorType<unknown>


export function useSearchNoticeByUsercode<TData = Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeByUsercode>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeByUsercode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeByUsercode<TData = Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof searchNoticeByUsercode>>,
          TError,
          Awaited<ReturnType<typeof searchNoticeByUsercode>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSearchNoticeByUsercode<TData = Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Í≥µÏßÄÏÇ¨Ìï≠ usecode Ï°∞Ìöå
 */

export function useSearchNoticeByUsercode<TData = Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError = ErrorType<unknown>>(
 params: SearchNoticeByUsercodeParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof searchNoticeByUsercode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSearchNoticeByUsercodeQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



