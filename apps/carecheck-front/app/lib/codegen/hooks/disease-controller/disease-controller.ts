/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * carecheck
 * api Î¨∏ÏÑú
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  InsertDeseaseParams,
  SelectDiseaseByDiseaseName200,
  SelectDiseaseByDiseaseNameParams
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * ÏßàÎ≥ëÎ™ÖÏúºÎ°ú Í≤ÄÏÉâ
 * @summary ÏßàÎ≥ëÍ≤ÄÏÉâ
 */
export const selectDiseaseByDiseaseName = (
    params: SelectDiseaseByDiseaseNameParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SelectDiseaseByDiseaseName200>(
      {url: `/api/diseases`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSelectDiseaseByDiseaseNameQueryKey = (params: SelectDiseaseByDiseaseNameParams,) => {
    return [`/api/diseases`, ...(params ? [params]: [])] as const;
    }

    
export const getSelectDiseaseByDiseaseNameInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>, TError = ErrorType<unknown>>(params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectDiseaseByDiseaseNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>> = ({ signal }) => selectDiseaseByDiseaseName(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectDiseaseByDiseaseNameInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>
export type SelectDiseaseByDiseaseNameInfiniteQueryError = ErrorType<unknown>


export function useSelectDiseaseByDiseaseNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>,
          TError,
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectDiseaseByDiseaseNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>,
          TError,
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectDiseaseByDiseaseNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏßàÎ≥ëÍ≤ÄÏÉâ
 */

export function useSelectDiseaseByDiseaseNameInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectDiseaseByDiseaseNameInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectDiseaseByDiseaseNameQueryOptions = <TData = Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError = ErrorType<unknown>>(params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectDiseaseByDiseaseNameQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>> = ({ signal }) => selectDiseaseByDiseaseName(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectDiseaseByDiseaseNameQueryResult = NonNullable<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>>
export type SelectDiseaseByDiseaseNameQueryError = ErrorType<unknown>


export function useSelectDiseaseByDiseaseName<TData = Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>,
          TError,
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectDiseaseByDiseaseName<TData = Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>,
          TError,
          Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectDiseaseByDiseaseName<TData = Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏßàÎ≥ëÍ≤ÄÏÉâ
 */

export function useSelectDiseaseByDiseaseName<TData = Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError = ErrorType<unknown>>(
 params: SelectDiseaseByDiseaseNameParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectDiseaseByDiseaseName>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectDiseaseByDiseaseNameQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏßàÎ≥ëÎì±Î°ù
 * @summary ÏßàÎ≥ëÎì±Î°ù
 */
export const insertDesease = (
    params: InsertDeseaseParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/api/diseases`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getInsertDeseaseMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof insertDesease>>, TError,{params: InsertDeseaseParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof insertDesease>>, TError,{params: InsertDeseaseParams}, TContext> => {
    
const mutationKey = ['insertDesease'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof insertDesease>>, {params: InsertDeseaseParams}> = (props) => {
          const {params} = props ?? {};

          return  insertDesease(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InsertDeseaseMutationResult = NonNullable<Awaited<ReturnType<typeof insertDesease>>>
    
    export type InsertDeseaseMutationError = ErrorType<unknown>

    /**
 * @summary ÏßàÎ≥ëÎì±Î°ù
 */
export const useInsertDesease = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof insertDesease>>, TError,{params: InsertDeseaseParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof insertDesease>>,
        TError,
        {params: InsertDeseaseParams},
        TContext
      > => {

      const mutationOptions = getInsertDeseaseMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    