/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * carecheck
 * api Î¨∏ÏÑú
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetPatientById200,
  RegisterPatient200,
  ReqPatientRegDto
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType , BodyType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * ÌôòÏûêÎì±Î°ù
 * @summary ÌôòÏûêÎì±Î°ùÏ∂îÍ∞Ä
 */
export const registerPatient = (
    reqPatientRegDto: BodyType<ReqPatientRegDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<RegisterPatient200>(
      {url: `/api/patients`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reqPatientRegDto, signal
    },
      options);
    }
  


export const getRegisterPatientMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerPatient>>, TError,{data: BodyType<ReqPatientRegDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof registerPatient>>, TError,{data: BodyType<ReqPatientRegDto>}, TContext> => {
    
const mutationKey = ['registerPatient'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof registerPatient>>, {data: BodyType<ReqPatientRegDto>}> = (props) => {
          const {data} = props ?? {};

          return  registerPatient(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RegisterPatientMutationResult = NonNullable<Awaited<ReturnType<typeof registerPatient>>>
    export type RegisterPatientMutationBody = BodyType<ReqPatientRegDto>
    export type RegisterPatientMutationError = ErrorType<unknown>

    /**
 * @summary ÌôòÏûêÎì±Î°ùÏ∂îÍ∞Ä
 */
export const useRegisterPatient = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof registerPatient>>, TError,{data: BodyType<ReqPatientRegDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof registerPatient>>,
        TError,
        {data: BodyType<ReqPatientRegDto>},
        TContext
      > => {

      const mutationOptions = getRegisterPatientMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * ÌôòÏûê Î≤àÌò∏ Ï°∞Ìöå
 * @summary ÌôòÏûê Î≤àÌò∏ Ï°∞Ìöå
 */
export const getPatientById = (
    patientId: number,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetPatientById200>(
      {url: `/api/patients/${patientId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetPatientByIdQueryKey = (patientId: number,) => {
    return [`/api/patients/${patientId}`] as const;
    }

    
export const getGetPatientByIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getPatientById>>>, TError = ErrorType<unknown>>(patientId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPatientByIdQueryKey(patientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatientById>>> = ({ signal }) => getPatientById(patientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(patientId), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPatientByIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getPatientById>>>
export type GetPatientByIdInfiniteQueryError = ErrorType<unknown>


export function useGetPatientByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPatientById>>>, TError = ErrorType<unknown>>(
 patientId: number, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientById>>,
          TError,
          Awaited<ReturnType<typeof getPatientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPatientByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPatientById>>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientById>>,
          TError,
          Awaited<ReturnType<typeof getPatientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPatientByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPatientById>>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌôòÏûê Î≤àÌò∏ Ï°∞Ìöå
 */

export function useGetPatientByIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getPatientById>>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPatientByIdInfiniteQueryOptions(patientId,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetPatientByIdQueryOptions = <TData = Awaited<ReturnType<typeof getPatientById>>, TError = ErrorType<unknown>>(patientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetPatientByIdQueryKey(patientId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getPatientById>>> = ({ signal }) => getPatientById(patientId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(patientId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetPatientByIdQueryResult = NonNullable<Awaited<ReturnType<typeof getPatientById>>>
export type GetPatientByIdQueryError = ErrorType<unknown>


export function useGetPatientById<TData = Awaited<ReturnType<typeof getPatientById>>, TError = ErrorType<unknown>>(
 patientId: number, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientById>>,
          TError,
          Awaited<ReturnType<typeof getPatientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPatientById<TData = Awaited<ReturnType<typeof getPatientById>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getPatientById>>,
          TError,
          Awaited<ReturnType<typeof getPatientById>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetPatientById<TData = Awaited<ReturnType<typeof getPatientById>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÌôòÏûê Î≤àÌò∏ Ï°∞Ìöå
 */

export function useGetPatientById<TData = Awaited<ReturnType<typeof getPatientById>>, TError = ErrorType<unknown>>(
 patientId: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getPatientById>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetPatientByIdQueryOptions(patientId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



