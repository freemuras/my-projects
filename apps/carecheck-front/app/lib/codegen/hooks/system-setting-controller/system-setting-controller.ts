/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * carecheck
 * api Î¨∏ÏÑú
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query';

import type {
  InsertScorePay200,
  InsertScorePayParams
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Îß§ÎÖÑ Îã®Í∞Ä Ï∂îÍ∞ÄÍ∞Ä
 * @summary Ï†êÏàòÎã®Í∞Ä Ï∂îÍ∞Ä
 */
export const insertScorePay = (
    params: InsertScorePayParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<InsertScorePay200>(
      {url: `/api/orders/score`, method: 'POST',
        params, signal
    },
      options);
    }
  


export const getInsertScorePayMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof insertScorePay>>, TError,{params: InsertScorePayParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof insertScorePay>>, TError,{params: InsertScorePayParams}, TContext> => {
    
const mutationKey = ['insertScorePay'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof insertScorePay>>, {params: InsertScorePayParams}> = (props) => {
          const {params} = props ?? {};

          return  insertScorePay(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InsertScorePayMutationResult = NonNullable<Awaited<ReturnType<typeof insertScorePay>>>
    
    export type InsertScorePayMutationError = ErrorType<unknown>

    /**
 * @summary Ï†êÏàòÎã®Í∞Ä Ï∂îÍ∞Ä
 */
export const useInsertScorePay = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof insertScorePay>>, TError,{params: InsertScorePayParams}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof insertScorePay>>,
        TError,
        {params: InsertScorePayParams},
        TContext
      > => {

      const mutationOptions = getInsertScorePayMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    