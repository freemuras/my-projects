/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * carecheck
 * api 문서
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetUsers200,
  GetUsersParams,
  InitialUserPassword200,
  InitialUserPasswordBody,
  ReqSignupDto,
  ResignationUser200,
  Signup200,
  UpdateUser200,
  UpdateUserBody
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType , BodyType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * 관리자 메뉴 - 직원 정보 조회 - 직원 정보 수정
 * @summary 직원 정보 수정
 */
export const updateUser = (
    usercode: string,
    updateUserBody: BodyType<UpdateUserBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UpdateUser200>(
      {url: `/api/admin/users/${usercode}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updateUserBody
    },
      options);
    }
  


export const getUpdateUserMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{usercode: string;data: BodyType<UpdateUserBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{usercode: string;data: BodyType<UpdateUserBody>}, TContext> => {
    
const mutationKey = ['updateUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateUser>>, {usercode: string;data: BodyType<UpdateUserBody>}> = (props) => {
          const {usercode,data} = props ?? {};

          return  updateUser(usercode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateUserMutationResult = NonNullable<Awaited<ReturnType<typeof updateUser>>>
    export type UpdateUserMutationBody = BodyType<UpdateUserBody>
    export type UpdateUserMutationError = ErrorType<unknown>

    /**
 * @summary 직원 정보 수정
 */
export const useUpdateUser = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateUser>>, TError,{usercode: string;data: BodyType<UpdateUserBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateUser>>,
        TError,
        {usercode: string;data: BodyType<UpdateUserBody>},
        TContext
      > => {

      const mutationOptions = getUpdateUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 관리자 메뉴 - 직원 정보 조회 - 직원 비밀번호 수정
 * @summary 직원 비밀번호 수정
 */
export const initialUserPassword = (
    usercode: string,
    initialUserPasswordBody: BodyType<InitialUserPasswordBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<InitialUserPassword200>(
      {url: `/api/admin/users/${usercode}/password`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: initialUserPasswordBody
    },
      options);
    }
  


export const getInitialUserPasswordMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initialUserPassword>>, TError,{usercode: string;data: BodyType<InitialUserPasswordBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof initialUserPassword>>, TError,{usercode: string;data: BodyType<InitialUserPasswordBody>}, TContext> => {
    
const mutationKey = ['initialUserPassword'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof initialUserPassword>>, {usercode: string;data: BodyType<InitialUserPasswordBody>}> = (props) => {
          const {usercode,data} = props ?? {};

          return  initialUserPassword(usercode,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type InitialUserPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof initialUserPassword>>>
    export type InitialUserPasswordMutationBody = BodyType<InitialUserPasswordBody>
    export type InitialUserPasswordMutationError = ErrorType<unknown>

    /**
 * @summary 직원 비밀번호 수정
 */
export const useInitialUserPassword = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof initialUserPassword>>, TError,{usercode: string;data: BodyType<InitialUserPasswordBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof initialUserPassword>>,
        TError,
        {usercode: string;data: BodyType<InitialUserPasswordBody>},
        TContext
      > => {

      const mutationOptions = getInitialUserPasswordMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 관리자 메뉴 - 직원 정보 조회 - 직원 퇴사 처리
 * @summary 직원 퇴사 처리
 */
export const resignationUser = (
    usercode: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ResignationUser200>(
      {url: `/api/admin/users/${usercode}/account`, method: 'PUT'
    },
      options);
    }
  


export const getResignationUserMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resignationUser>>, TError,{usercode: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof resignationUser>>, TError,{usercode: string}, TContext> => {
    
const mutationKey = ['resignationUser'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resignationUser>>, {usercode: string}> = (props) => {
          const {usercode} = props ?? {};

          return  resignationUser(usercode,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResignationUserMutationResult = NonNullable<Awaited<ReturnType<typeof resignationUser>>>
    
    export type ResignationUserMutationError = ErrorType<unknown>

    /**
 * @summary 직원 퇴사 처리
 */
export const useResignationUser = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resignationUser>>, TError,{usercode: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resignationUser>>,
        TError,
        {usercode: string},
        TContext
      > => {

      const mutationOptions = getResignationUserMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    /**
 * 관리자 메뉴 - 직원 정보 조회
 * @summary 직원 정보 조회
 */
export const getUsers = (
    params: GetUsersParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<GetUsers200>(
      {url: `/api/admin/users`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUsersQueryKey = (params: GetUsersParams,) => {
    return [`/api/admin/users`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUsersInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>>, TError = ErrorType<unknown>>(params: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersInfiniteQueryError = ErrorType<unknown>


export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 직원 정보 조회
 */

export function useGetUsersInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getUsers>>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetUsersQueryOptions = <TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(params: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUsersQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUsers>>> = ({ signal }) => getUsers(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = ErrorType<unknown>


export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUsers>>,
          TError,
          Awaited<ReturnType<typeof getUsers>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary 직원 정보 조회
 */

export function useGetUsers<TData = Awaited<ReturnType<typeof getUsers>>, TError = ErrorType<unknown>>(
 params: GetUsersParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUsers>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUsersQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * 사번등록
 * @summary 회원가입(사번등록)
 */
export const signup = (
    reqSignupDto: BodyType<ReqSignupDto>,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Signup200>(
      {url: `/api/admin/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: reqSignupDto, signal
    },
      options);
    }
  


export const getSignupMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signup>>, TError,{data: BodyType<ReqSignupDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof signup>>, TError,{data: BodyType<ReqSignupDto>}, TContext> => {
    
const mutationKey = ['signup'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signup>>, {data: BodyType<ReqSignupDto>}> = (props) => {
          const {data} = props ?? {};

          return  signup(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignupMutationResult = NonNullable<Awaited<ReturnType<typeof signup>>>
    export type SignupMutationBody = BodyType<ReqSignupDto>
    export type SignupMutationError = ErrorType<unknown>

    /**
 * @summary 회원가입(사번등록)
 */
export const useSignup = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signup>>, TError,{data: BodyType<ReqSignupDto>}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signup>>,
        TError,
        {data: BodyType<ReqSignupDto>},
        TContext
      > => {

      const mutationOptions = getSignupMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    