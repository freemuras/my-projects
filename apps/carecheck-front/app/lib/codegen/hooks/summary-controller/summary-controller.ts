/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * carecheck
 * api Î¨∏ÏÑú
 * OpenAPI spec version: 1.0.0
 */
import {
  useInfiniteQuery,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  SelectTotalByUserCodeAndYear200,
  SelectTotalByUserCodeAndYearParams,
  SelectTotalByYear200,
  SelectTotalByYearParams
} from '../../dtos';

import { customInstance } from '../../../axios-client/customClient';
import type { ErrorType } from '../../../axios-client/customClient';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * Î∂ÑÍ∏∞Î≥Ñ Î≥ëÏõê Ï¥ù ÏàòÏùµ
 * @summary Ïó∞ÎèÑÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */
export const selectTotalByYear = (
    params: SelectTotalByYearParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SelectTotalByYear200>(
      {url: `/api/summary`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSelectTotalByYearQueryKey = (params: SelectTotalByYearParams,) => {
    return [`/api/summary`, ...(params ? [params]: [])] as const;
    }

    
export const getSelectTotalByYearInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByYear>>>, TError = ErrorType<unknown>>(params: SelectTotalByYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectTotalByYearQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectTotalByYear>>> = ({ signal }) => selectTotalByYear(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectTotalByYearInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectTotalByYear>>>
export type SelectTotalByYearInfiniteQueryError = ErrorType<unknown>


export function useSelectTotalByYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ïó∞ÎèÑÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */

export function useSelectTotalByYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectTotalByYearInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectTotalByYearQueryOptions = <TData = Awaited<ReturnType<typeof selectTotalByYear>>, TError = ErrorType<unknown>>(params: SelectTotalByYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectTotalByYearQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectTotalByYear>>> = ({ signal }) => selectTotalByYear(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectTotalByYearQueryResult = NonNullable<Awaited<ReturnType<typeof selectTotalByYear>>>
export type SelectTotalByYearQueryError = ErrorType<unknown>


export function useSelectTotalByYear<TData = Awaited<ReturnType<typeof selectTotalByYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByYear<TData = Awaited<ReturnType<typeof selectTotalByYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByYear<TData = Awaited<ReturnType<typeof selectTotalByYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Ïó∞ÎèÑÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */

export function useSelectTotalByYear<TData = Awaited<ReturnType<typeof selectTotalByYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectTotalByYearQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÏßÅÏõêÏÇ¨Î≤àÏóê Îî∞Î•∏ Î≥ëÏõê Ï¥ù ÏàòÏùµ
 * @summary ÏßÅÏõê ÏÇ¨Î≤àÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */
export const selectTotalByUserCodeAndYear = (
    params: SelectTotalByUserCodeAndYearParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SelectTotalByUserCodeAndYear200>(
      {url: `/api/summary/usercode`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getSelectTotalByUserCodeAndYearQueryKey = (params: SelectTotalByUserCodeAndYearParams,) => {
    return [`/api/summary/usercode`, ...(params ? [params]: [])] as const;
    }

    
export const getSelectTotalByUserCodeAndYearInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>, TError = ErrorType<unknown>>(params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectTotalByUserCodeAndYearQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>> = ({ signal }) => selectTotalByUserCodeAndYear(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectTotalByUserCodeAndYearInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>
export type SelectTotalByUserCodeAndYearInfiniteQueryError = ErrorType<unknown>


export function useSelectTotalByUserCodeAndYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByUserCodeAndYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByUserCodeAndYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏßÅÏõê ÏÇ¨Î≤àÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */

export function useSelectTotalByUserCodeAndYearInfinite<TData = InfiniteData<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectTotalByUserCodeAndYearInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions , queryClient) as  UseInfiniteQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSelectTotalByUserCodeAndYearQueryOptions = <TData = Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError = ErrorType<unknown>>(params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getSelectTotalByUserCodeAndYearQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>> = ({ signal }) => selectTotalByUserCodeAndYear(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type SelectTotalByUserCodeAndYearQueryResult = NonNullable<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>>
export type SelectTotalByUserCodeAndYearQueryError = ErrorType<unknown>


export function useSelectTotalByUserCodeAndYear<TData = Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByUserCodeAndYear<TData = Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>,
          TError,
          Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useSelectTotalByUserCodeAndYear<TData = Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary ÏßÅÏõê ÏÇ¨Î≤àÏóê Îî∞Î•∏ Î∂ÑÍ∏∞Î≥Ñ Í∏àÏï°
 */

export function useSelectTotalByUserCodeAndYear<TData = Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError = ErrorType<unknown>>(
 params: SelectTotalByUserCodeAndYearParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof selectTotalByUserCodeAndYear>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getSelectTotalByUserCodeAndYearQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



